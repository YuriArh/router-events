import { useState } from "react";
import { Theme } from "remix-themes";
import { cn } from "~/shared/lib/utils";
import type { IEvent } from "~/modules/event/model";

/**
 * Props –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MapMarker
 */
interface MapMarkerProps {
  /** –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ */
  marker: IEvent;
  /** Callback —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" */
  onEventClick?: (marker: IEvent) => void;
  /** –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–≤–µ—Ç–ª–∞—è/—Ç–µ–º–Ω–∞—è) */
  theme?: Theme;

  onClose?: () => void;
}

/**
 * –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–±—ã—Ç–∏–π
 */
const categoryColors = {
  music: "bg-purple-500",
  sports: "bg-green-500",
  art: "bg-pink-500",
  food: "bg-orange-500",
  science: "bg-blue-500",
  technology: "bg-indigo-500",
  other: "bg-gray-500",
} as const;

/**
 * –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–±—ã—Ç–∏–π
 */
const categoryIcons = {
  music: "üéµ",
  sports: "‚öΩ",
  art: "üé®",
  food: "üçΩÔ∏è",
  science: "üî¨",
  technology: "üíª",
  other: "üìÖ",
} as const;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ popup –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –≤ –≤–∏–¥–µ —Å—Ç–∏–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
 * –≤ —Å—Ç–∏–ª–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 *
 * @param props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @returns JSX —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è
 *
 * @example
 * ```tsx
 * <MapMarker
 *   marker={eventData}
 *   onEventClick={(event) => navigate(`/event/${event._id}`)}
 *   theme={currentTheme}
 * />
 * ```
 */
export function MapMarker({
  marker,
  onEventClick,
  theme,
  onClose,
}: MapMarkerProps) {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  const handleImageNavigation = (direction: "prev" | "next") => {
    if (!marker.images || marker.images.length === 0) return;

    const imagesLength = marker.images.length;
    setCurrentImageIndex((prev) => {
      if (direction === "next") {
        return prev === imagesLength - 1 ? 0 : prev + 1;
      }
      return prev === 0 ? imagesLength - 1 : prev - 1;
    });
  };

  const formatEventDate = (dateString?: string) => {
    if (!dateString) return null;
    const date = new Date(dateString);
    return {
      date: date.toLocaleDateString("ru-RU", {
        day: "numeric",
        month: "long",
      }),
      time: marker.time ? marker.time : null,
    };
  };

  const eventDate = formatEventDate(marker.date);

  return (
    <div
      className={cn(
        theme === Theme.DARK
          ? "bg-gray-900 border-gray-700"
          : "bg-white border-gray-200"
      )}
      onClick={(e) => e.stopPropagation()}
      onKeyDown={(e) => e.stopPropagation()}
    >
      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è */}
      {marker.images && marker.images.length > 0 && (
        <div className="relative h-48 bg-gray-100">
          <img
            src={marker.images[currentImageIndex] ?? undefined}
            alt={marker.title}
            className="w-full h-full object-cover"
          />

          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º */}
          {marker.images.length > 1 && (
            <>
              <button
                type="button"
                onClick={() => handleImageNavigation("prev")}
                className="absolute left-3 top-1/2 -translate-y-1/2 w-8 h-8 rounded-full bg-black/50 text-white flex items-center justify-center hover:bg-black/70 transition-colors"
                aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
              >
                ‚Üê
              </button>
              <button
                type="button"
                onClick={() => handleImageNavigation("next")}
                className="absolute right-3 top-1/2 -translate-y-1/2 w-8 h-8 rounded-full bg-black/50 text-white flex items-center justify-center hover:bg-black/70 transition-colors"
                aria-label="–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
              >
                ‚Üí
              </button>

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
              <div className="absolute bottom-3 left-1/2 -translate-x-1/2 flex gap-2">
                {marker.images.map((imageId, index) => (
                  <button
                    key={imageId}
                    type="button"
                    onClick={() => setCurrentImageIndex(index)}
                    className={cn(
                      "w-2 h-2 rounded-full transition-all",
                      index === currentImageIndex
                        ? "bg-white scale-125"
                        : "bg-white/50 hover:bg-white/75"
                    )}
                    aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é ${index + 1}`}
                  />
                ))}
              </div>
            </>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
          <button
            type="button"
            className="absolute top-3 right-3 w-8 h-8 rounded-full bg-black/50 text-white flex items-center justify-center hover:bg-black/70 transition-colors"
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏—è"
            onClick={onClose}
          >
            √ó
          </button>
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="p-5">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
        <div className="flex items-start justify-between mb-3">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white leading-tight flex-1 mr-2">
            {marker.title}
          </h3>
          <span
            className={cn(
              "flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium text-white",
              categoryColors[marker.category]
            )}
          >
            <span>{categoryIcons[marker.category]}</span>
            <span className="capitalize">{marker.category}</span>
          </span>
        </div>

        {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
        {eventDate && (
          <div className="flex items-center gap-2 mb-3 text-sm text-gray-600 dark:text-gray-400">
            <span className="text-lg">üìÖ</span>
            <span>{eventDate.date}</span>
            {eventDate.time && (
              <>
                <span>‚Ä¢</span>
                <span>{eventDate.time}</span>
              </>
            )}
          </div>
        )}

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        {marker.description && (
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
            {marker.description}
          </p>
        )}

        {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
        <div className="flex items-center gap-2 mb-4 text-sm text-gray-600 dark:text-gray-400">
          <span className="text-lg">üë•</span>
          <span>{marker.attendeeCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
        <button
          type="button"
          className={cn(
            "w-full py-3 px-4 rounded-xl font-medium transition-all duration-200",
            "hover:scale-[1.02] active:scale-[0.98]",
            theme === Theme.DARK
              ? "bg-white text-gray-900 hover:bg-gray-100"
              : "bg-gray-900 text-white hover:bg-gray-800"
          )}
          onClick={(e) => {
            e.stopPropagation();
            onEventClick?.(marker);
          }}
        >
          –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–æ–±—ã—Ç–∏–∏
        </button>
      </div>
    </div>
  );
}
